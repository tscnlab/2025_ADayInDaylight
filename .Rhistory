# ---------- build lon/lat grid ----------
lons <- seq(-180, 180, by = lon_step)
lats <- seq(-90,  90,  by = lat_step)
grid <- expand.grid(lon = lons, lat = lats) |>
as_tibble()
# ---------- time sequence ----------
times_utc <- seq(t_start, t_end, by = time_step)
# ---------- compute sun altitude for each (lon, lat, time) ----------
# We'll loop over time slices (efficient enough for this grid size),
# compute altitude (in radians from suncalc), convert to degrees,
# then map to a "darkness" alpha value.
#| label: Function to calculate sunposition
compute_slice <- function(tt) {
# build a data frame with the timestamp repeated for each grid point
df <- data.frame(
date = rep(tt, nrow(grid)),
lat  = grid$lat,
lon  = grid$lon
)
# call suncalc with a data frame instead of separate lat/lon vectors
sp <- suncalc::getSunlightPosition(data = df, keep = c("altitude"))
# altitude is returned in radians; convert to degrees
alt_deg <- sp$altitude * 180 / pi
# darkness mapping (same as before)
darkness <- pmin(1, pmax(0, -alt_deg / 6))
tibble(
lon = grid$lon,
lat = grid$lat,
time = tt,
alt_deg = alt_deg,
darkness = darkness
)
}
#| label: Set parameters for day/night
# Time window (UTC)
t_start <- ymd_hms("2025-09-21 12:00:00", tz = "UTC")
t_end   <- ymd_hms("2025-09-23 12:00:00", tz = "UTC")
# Step between frames (adjust to taste: "30 mins", "1 hour", etc.)
time_step <- "30 mins"
# Spatial grid resolution (degrees). 2° keeps things light; 1° looks smoother but is heavier.
lon_step <- 0.5
lat_step <- 0.5
# Darkness mapping: fully dark at civil twilight (-6°), linearly increasing from 0 to 1 as altitude goes 0 -> -6°.
dark_full_altitude <- -6 # degrees
# ---------- build lon/lat grid ----------
lons <- seq(-180, 180, by = lon_step)
lats <- seq(-90,  90,  by = lat_step)
grid <- expand.grid(lon = lons, lat = lats) |>
as_tibble()
# ---------- time sequence ----------
times_utc <- seq(t_start, t_end, by = time_step)
# ---------- compute sun altitude for each (lon, lat, time) ----------
# We'll loop over time slices (efficient enough for this grid size),
# compute altitude (in radians from suncalc), convert to degrees,
# then map to a "darkness" alpha value.
#| label: Function to calculate sunposition
compute_slice <- function(tt) {
# build a data frame with the timestamp repeated for each grid point
df <- data.frame(
date = rep(tt, nrow(grid)),
lat  = grid$lat,
lon  = grid$lon
)
# call suncalc with a data frame instead of separate lat/lon vectors
sp <- suncalc::getSunlightPosition(data = df, keep = c("altitude"))
# altitude is returned in radians; convert to degrees
alt_deg <- sp$altitude * 180 / pi
# darkness mapping (same as before)
darkness <- pmin(1, pmax(0, -alt_deg / 6))
tibble(
lon = grid$lon,
lat = grid$lat,
time = tt,
alt_deg = alt_deg,
darkness = darkness
)
}
#| label: Compute sunpositions
# Create the progress bar once
pb <- progress_bar$new(
format = "Computing slices [:bar] :percent eta: :eta",
total = length(times_utc), clear = FALSE, width = 70
)
shade_list <- vector("list", length(times_utc))
for (i in seq_along(times_utc)) {
# Compute one time slice (without pb$tick() inside)
shade_list[[i]] <- compute_slice(times_utc[[i]])
# Now update the bar
pb$tick()
}
shade_df <- dplyr::bind_rows(shade_list)
shade_df <- bind_rows(lapply(times_utc, compute_slice))
#| label: Collect mel EDI across lat, lon, and time
light_data_globe <-
light_data_ext |>
filter_Datetime(DatetimeUTC, start = t_start, end = t_end, tz = "UTC") |>
select(Id, DatetimeUTC, latitude, longitude, MEDI) |>
dplyr::mutate(lat2 = plyr::round_any(latitude, 12),
lon2 = plyr::round_any(longitude, 12)) |>
ungroup() |>
dplyr::summarize(
.by = c(DatetimeUTC, lat2, lon2),
lat = mean(latitude),
lon = mean(longitude),
MEDI = mean(MEDI, na.rm = TRUE),
n = n()
) |>
rename(time = DatetimeUTC)
light_globe <- st_as_sf(light_data_globe, coords = c("lon", "lat"), crs = 4326)
light_proj <- st_transform(light_globe, crs = "+proj=eqc")
#| label: Plot mel EDI across the globe
#| warning: false
p <-
ggplot() +
geom_sf(
data = world_proj,
fill = "grey",
color = NA,
size = 0.25,
alpha = 0.5,
show.legend = FALSE
) +
geom_sf(data = tz_lines,
colour = "deepskyblue3",
alpha = 0.75,
linewidth = 0.1) +
geom_tile(
data = shade_df,
mapping = aes(x = lon, y = lat, alpha = darkness),
fill = "black",
width = lon_step, height = lat_step
) +
geom_sf(
data = light_proj,
aes(size = n, fill = MEDI, colour = MEDI),
alpha = 0.9,
shape = 21,
stroke = 0.2
) +
# tile overlay for night shading (black with varying alpha)
geom_sf_text(
data = locations_proj,
aes(label = n),
size = 1.9,
fontface = 2,
color = "white",
alpha = 0.75
) +
scale_alpha(range = c(0, 0.6), limits = c(0, 1), guide = "none") +
coord_sf(crs = 4326, expand = FALSE, xlim = c(-180, 180), ylim = c(-90, 90)) +
# coord_sf(crs = 4326, xlim = c(-180, 180), ylim = c(-90, 90)) +
labs(
title = "{format(frame_time, '%Y-%m-%d %H:%M:%S', tz = 'UTC')} (UTC)",
x = NULL,
y = NULL
) +
guides(size = "none",
)+
labs(fill = "mel EDI (lx)", colour = "mel EDI (lx)")+
scale_fill_viridis_b(trans = "symlog", breaks = c(0, 10^(0:5)),
labels =
function(x) format(x, scientific = FALSE, big.mark = " "),
limits = c(0, 10^5)) +
scale_colour_viridis_b(trans = "symlog", breaks = c(0, 10^(0:5)),
labels =
function(x) format(x, scientific = FALSE, big.mark = " "),
limits = c(0, 10^5)) +
scale_size_continuous(range = c(3, 7.5)) +
theme_minimal(base_size = 13) +
theme(
panel.grid.major = element_line(size = 0.1, colour = "grey85"),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold"),
legend.text.align = 1,
legend.text.position = "left",
legend.position = "inside",
legend.position.inside = c(0.1,0.35),
legend.background = element_rect(fill = alpha("white", alpha = 0.25),
colour = NA)
) +
transition_time(time)
# Frame rate and dimensions
fps_out <- 10
width_px <- 1400
height_px <- 800
dose_race_data <-
light_data_ext |>
filter_Datetime(DatetimeUTC, start = t_start, end = t_end, tz = "UTC") |>
dplyr::filter(!travel_time_zone) |>
select(Id, DatetimeUTC, MEDI, type, setting_light,
city, country, latitude, longitude) |>
dplyr::rename(Datetime = DatetimeUTC) |>
# aggregate_Datetime("12 hours") |>
dplyr::mutate(Dose = (MEDI/12),
Dose = ifelse(is.na(Dose), 0, Dose),
Dose = cumsum(Dose),
Rando = runif(n(), 0, 0.01),
Dose = Dose - first(Dose) + Rando,
.after = MEDI) |>
group_by(Datetime) |>
dplyr::mutate(rank = rank(Dose),
country = as.factor(country),
country = case_match(country,
"United Kingdom" ~ "UK",
"United States of America" ~ "USA",
.default = country
),
location = paste0(city, ", ", country)) |>
ungroup()
dose_race <-
dose_race_data |>
ggplot() +
geom_col(aes(x=rank, y=Dose, group=Id, fill = country),
width = 0.8, position = "identity") +
geom_text(aes(x=rank, y=Dose,
label= signif(round(Dose), 3),
group=Id), hjust= -0.25, size = 2) +
geom_richtext(aes(x=rank, y=-1,
label=ifelse(rank >= (44-5), glue("<b>{location}</b>"), location),
group=Id),
fill = NA,
label.color = NA,
label.padding = unit(rep(0,4), "pt"),
hjust= 1, size = 2) +
theme_minimal() +
ylab('Light exposure (dose, lx·h)') +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,3,1,8), 'lines')) +
guides(fill = "none")+
scale_fill_manual(values = country_colors) +
coord_flip(clip='off')
anim.plot <-
dose_race +
ggtitle("{format(frame_time, '%Y-%m-%d %H:%M:%S', tz = 'UTC')} (UTC)") +
transition_time(Datetime) +
view_follow()
anim2 <- animate(
anim.plot,
duration = 48*2,
fps = fps_out,
width = width_px,
height = height_px,
res = 150,
renderer = magick_renderer()
)
out_file <- "figures/Fig7_Light_dose.mp4"
image_write_video(anim2, out_file, framerate = fps_out)
image_write_gif(anim2, out_file, delay = 1/fps_out)
out_file <- "figures/Fig7_Light_dose.mp4"
image_write_video(anim2, out_file, framerate = fps_out)
out_file <- "figures/Fig7_Light_dose.gif"
image_write_gif(anim2, out_file, delay = 1/fps_out)
anim <- animate(
p,
duration = 48,
fps = fps_out,
width = width_px,
height = height_px,
res = 150,
renderer = magick_renderer(loop = TRUE)
)
out_file <- "figures/Fig6_melEDI_global.mp4"
image_write_video(anim, out_file, framerate = fps_out)
out_file <- "figures/Fig6_melEDI_global.gif"
image_write_gif(anim, out_file, delay = 1/fps_out)
anim.plot <-
dose_race +
# ggtitle("{format(frame_time, '%Y-%m-%d %H:%M:%S', tz = 'UTC')} (UTC)") +
transition_time(Datetime) +
view_follow()
anim2 <- animate(
anim.plot,
duration = 48*2,
fps = fps_out,
width = width_px,
height = height_px,
res = 150,
renderer = magick_renderer()
)
out_file <- "figures/Fig7_Light_dose.gif"
image_write_gif(anim2, out_file, delay = 1/fps_out)
dose_race <-
dose_race_data |>
ggplot() +
geom_col(aes(x=rank, y=Dose, group=Id, fill = country),
width = 0.8, position = "identity") +
geom_text(aes(x=rank, y=Dose,
label= signif(round(Dose), 3),
group=Id), hjust= -0.25, size = 2) +
geom_richtext(aes(x=rank, y=-1,
label=ifelse(rank >= (44-5), glue("<b>{location}</b>"), location),
group=Id),
fill = NA,
label.color = NA,
label.padding = unit(rep(0,4), "pt"),
hjust= 1, size = 2) +
theme_minimal() +
ylab('Light exposure (dose, lx·h)') +
theme(axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,3,1,8), 'lines')) +
guides(fill = "none")+
scale_fill_manual(values = country_colors) +
coord_flip(clip='off')
dose_race
anim.plot <-
dose_race +
ggtitle("{format(frame_time, '%Y-%m-%d %H:%M:%S', tz = 'UTC')} (UTC)") +
transition_time(Datetime) +
view_follow()
anim.plot
dose_race <-
dose_race_data |>
ggplot() +
geom_col(aes(x=rank, y=Dose, group=Id, fill = country),
width = 0.8, position = "identity") +
geom_text(aes(x=rank, y=Dose,
label= signif(round(Dose), 3),
group=Id), hjust= -0.25, size = 2) +
geom_richtext(aes(x=rank, y=-1,
label=ifelse(rank >= (44-5), glue("<b>{location}</b>"), location),
group=Id),
fill = NA,
label.color = NA,
label.padding = unit(rep(0,4), "pt"),
hjust= 1, size = 2) +
theme_minimal() +
ylab('Light exposure (dose, lx·h)') +
theme(axis.title.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,3,1,8), 'lines')) +
guides(fill = "none")+
scale_fill_manual(values = country_colors) +
coord_flip(clip='off')
anim.plot <-
dose_race +
ggtitle("{format(frame_time, '%Y-%m-%d %H:%M:%S', tz = 'UTC')} (UTC)") +
transition_time(Datetime) +
view_follow()
anim.plot
anim2 <- animate(
anim.plot,
duration = 48*2,
fps = fps_out,
width = width_px,
height = height_px,
res = 150,
renderer = magick_renderer()
)
out_file <- "figures/Fig7_Light_dose.mp4"
image_write_video(anim2, out_file, framerate = fps_out)
image_write_video(anim2, out_file, framerate = fps_out)
image_write_video(anim2, out_file, framerate = fps_out)
anim.plot <-
dose_race +
# ggtitle("{format(frame_time, '%Y-%m-%d %H:%M:%S', tz = 'UTC')} (UTC)") +
transition_time(Datetime) +
view_follow()
anim2 <- animate(
anim.plot,
duration = 48*2,
fps = fps_out,
width = width_px,
height = height_px,
res = 150,
renderer = magick_renderer()
)
out_file <- "figures/Fig7_Light_dose.gif"
image_write_gif(anim2, out_file, delay = 1/fps_out)
new_gif <- image_append(c(anim2[1], anim[1]), stack = TRUE)
new_gif
anim2[1]
anim[1]
anim2[1]
new_gif
anim2
#| label: setup
library(LightLogR)
library(Hmisc)
library(tidyverse)
library(gt)
library(patchwork)
library(gtExtras)
library(gtsummary)
library(legendry)
library(rlang)
library(gganimate)
library(ggdist)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(glue)
library(suncalc)
library(scales)
library(ggtext)
library(magick)
library(progress)
# source("https://raw.githubusercontent.com/MeLiDosProject/Data_Metadata_Conventions/main/scripts/overview_plot.R")
new_gif
anim2[960]
anim[960]
anim[959]
anim[480]
for(i in 2:(480)) {
new_gif <- c(new_gif, image_append(c(anim2[i*2], anim[i]), stack = TRUE))
}
image_write_gif(new_gif,"figures/Fig7b_Light_dose.gif", 1/fps_out)
image_write_video(new_gif,"figures/Fig7b_Light_dose.mp4", framerate = fps_out)
anim <- animate(
p,
duration = 48*2,
fps = fps_out,
width = width_px,
height = height_px,
res = 150,
renderer = magick_renderer(loop = TRUE)
)
out_file <- "figures/Fig6_melEDI_global.mp4"
image_write_video(anim, out_file, framerate = fps_out)
out_file <- "figures/Fig6_melEDI_global.gif"
image_write_gif(anim, out_file, delay = 1/fps_out)
#| label: setup
devtools::install_github("jimjam-slam/ggflags")
#| label: setup
# devtools::install_github("jimjam-slam/ggflags")
library(ggflags)
library(LightLogR)
library(Hmisc)
library(tidyverse)
library(gt)
library(patchwork)
library(gtExtras)
library(gtsummary)
library(legendry)
library(rlang)
library(gganimate)
library(ggdist)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(glue)
library(suncalc)
library(scales)
library(ggtext)
library(magick)
library(progress)
# source("https://raw.githubusercontent.com/MeLiDosProject/Data_Metadata_Conventions/main/scripts/overview_plot.R")
out_file <- "figures/Fig6_melEDI_global.mp4"
image_write_video(anim, out_file, framerate = fps_out)
new_gif <- image_append(c(anim2[1], anim[1]), stack = TRUE)
anim[960]
for(i in 2:(960)) {
new_gif <- c(new_gif, image_append(c(anim2[i], anim[i]), stack = TRUE))
}
image_write_gif(new_gif,"figures/Fig7b_Light_dose.gif", 1/fps_out)
getwd()
image_write_video(new_gif,"figures/Fig7b_Light_dose.mp4", framerate = fps_out)
anim.plot <-
dose_race +
# ggtitle("{format(frame_time, '%Y-%m-%d %H:%M:%S', tz = 'UTC')} (UTC)") +
transition_time(Datetime) +
view_follow()
anim2 <- animate(
anim.plot,
duration = 48*2,
fps = fps_out,
width = width_px/2,
height = height_px,
res = 150,
renderer = magick_renderer()
)
out_file <- "figures/Fig7_Light_dose.gif"
image_write_gif(anim2, out_file, delay = 1/fps_out)
new_gif <- image_append(c(anim2[1], anim[1]))
for(i in 2:(960)) {
new_gif <- c(new_gif, image_append(c(anim2[i], anim[i])))
}
image_write_gif(new_gif,"figures/Fig7b_Light_dose.gif", 1/fps_out)
image_write_video(new_gif,"figures/Fig7b_Light_dose.mp4", framerate = fps_out)
anim2 <- animate(
anim.plot,
duration = 48*2,
fps = fps_out,
width = width_px/3*2,
height = height_px,
res = 150,
renderer = magick_renderer()
)
anim2 <- animate(
anim.plot,
duration = 48*2,
fps = fps_out,
width = width_px,
height = height_px,
res = 150,
renderer = magick_renderer()
)
new_gif <- image_append(c(anim[1], anim2[1]))
for(i in 2:(960)) {
new_gif <- c(new_gif, image_append(c(anim[i], anim2[i])))
}
image_write_gif(new_gif,"figures/Fig7b_Light_dose.gif", 1/fps_out)
image_write_video(new_gif,"figures/Fig7b_Light_dose.mp4", framerate = fps_out)
